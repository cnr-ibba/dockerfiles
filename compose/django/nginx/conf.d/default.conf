
# mysite_nginx.conf

# This conf file tells nginx to serve up media and static files from the filesystem,
# as well as handle requests that require Djangoâ€™s intervention. For a large deployment
# it is considered good practice to let one server handle static/media files, and
# another handle Django applications;

# the django component nginx needs to connect to
upstream django {
    # server unix:///path/to/your/mysite/mysite.sock; # for a file socket
    server uwsgi:8000; # for a web port socket (we'll use this first)
}

# configuration of the server
server {
    # the port your site will be served on
    listen      80;

    # the domain name it will serve for
    server_name localhost; # substitute your machine's IP address or FQDN
    charset     utf-8;

    # access log: disabled in docker image
    #access_log  /var/log/nginx/log/host.access.log  main;

    #the default error_page
    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/share/nginx/html;
    }

    # max upload size
    client_max_body_size 75M;   # adjust to taste

    # enable the cache which stores information about open files. It does not actually
    # store file contents itself but only information. After 180 secs, cache is wiped out
    open_file_cache max=5000 inactive=180;

    # however If there is activity though, you can prevent Nginx from removing the cache
    # entry. This directive defines the amount of time an entry must be accessed in order
    # to be eligible for protection, until Nginx decides to clear out older entries to free up
    # some space.
    open_file_cache_min_uses 3;

    # Enables or disables logging of sub-requests triggered by internal redirects
    # or SSI requests
    log_subrequest on;

    # Nginx will issue log messages for every operation performed by the rewrite engine
    # at the notice error level
    rewrite_log on;

    # merging multiple consecutive slashes in a URI (eg //. Useful!!!)
    merge_slashes on;

    # whether or not Nginx should inform the clients of the running version number.
    # it might be a good idea to hide your version number for security reasons
    server_tokens off;

    # the default location
    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm index.php;

        #try files or directory. If not found, raise 404 error_page
        try_files $uri $uri/ =404;
    }

    # Deny all attempts to access hidden files such as .htaccess, .htpasswd, .DS_Store (Mac).
    location ~ /\. {
        deny  all;
    }

    # if anyone tries to access a '.py' file directly, return a File Not Found code
    location ~* ^.+\.py$ {
        return 404;
    }

    # Django media
    location /mysite/media/  {
        # your Django project's media files - amend as required. The final / is important
        alias /var/uwsgi/mysite/media/;
    }

    # Django static
    location /mysite/static/ {
        # your Django project's static files - amend as required
        alias /var/uwsgi/mysite/static/;
    }

    # Finally, send all non-media requests to the Django server.
    location /mysite {
        # rewrite location. Since we are searching in mysite directory and the script
        # will be achievable via /mysite path (SCRIPT_NAME) I have to remove a mysite
        # directory
        rewrite ^/mysite/?(.*)$ /$1 break;

        # passing modified URI to django upstream
        uwsgi_pass  django;

        # the default uwsgi_params file of nginx
        include     uwsgi_params;

        # calling uwsgi script in mysite directory
        # this is REQUIRED when using sublocation (ie http://localhost/mysite as index)
        uwsgi_param SCRIPT_NAME  /mysite;

        # Setting timeout
        uwsgi_read_timeout  120;
        uwsgi_send_timeout  120;
    }
}
